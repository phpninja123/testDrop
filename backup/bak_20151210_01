var express    = require("express");
var mysql      = require('mysql');
var bodyParser = require('body-parser');
var winston= require('winston');
var path = require('path');


var app = express();

var filename = path.join(__dirname, 'created-logfile.log');


var logger = new (winston.Logger)({
  transports: [
    new (winston.transports.Console)(),
    new (winston.transports.File)({ filename: filename })
  ]
});

var pool      =    mysql.createPool({
    connectionLimit : 100, //important
    host     : '127.0.0.1',
    user     : 'elecdbhb_siteusr',
    port      : 3306,
    password : 'TheMostAmazingPasswordEver@1985',
    database : 'elecdbhb_idropwaterdb',
    debug    :  false
});

/***
Hndle location
***/
function DoSomethingWithLocation(jsondata)
{
  var str = jsondata.LC;
  var arr = str.split(',');
  var LAT = arr[2];
  var LNG = arr[3];

  logger.log('info','LAT :' + LAT + ' LNG ' + LNG);

//////////////////

pool.getConnection(function(err,connection){
        if (err) {
          connection.release();
          return;
        }     

        var query =
                  'update dsd_dispensor_site_detail set dsd_GPS_LAT = "' + LAT + '", dsd_GPS_LONG = "' + LNG + '" where dsd_Dispensor_ID = "' + jsondata.ID + '"';

                  console.log(query);
        connection.query(query,function(err,rows){
            connection.release();
            if (err) throw err;
            if (!rows)
            {
              logger.log('info','updated');
            }
            else
            {
              logger.log('info','thats weird' ,rows); 
            }
            return;
        });

        connection.on('error', function(err) {
              logger.log('info','This should not happen',{'error' :err});
              return;
        });
      });



//////////////////


return;
//{"LC": "\r\n+UULOC: 07/12/2015,20:28:15.051,-25.8393505,28.3010126,0,4299,0,000,0,2,0,0,0\r\n", "ID": "359394057515292"}




}

function DoSomethingWithCalibration(jsondata)
{
  var str = '';
  var calnumber = 0;
  if (jsondata.CAL1 != null) 
  { 
    calnumber = 1;
    str = jsondata.CAL1;
  }
  else if (jsondata.CAL2 != null) 
  { 
    calnumber = 2;
    str = jsondata.CAL2;
  }
  else if (jsondata.CAL3 != null) 
  { 
    calnumber = 3;
    str = jsondata.CAL3;
  }
  
  logger.log('info','calnumber :' + calnumber + ' value ' + str);

if (str == 0)
{
  logger.log('info','NOT PROCESSING THIS');
  return;
}

pool.getConnection(function(err,connection){
        if (err) {
          connection.release();
          return;
        }     
    if (calnumber == 1)
    {
      var query =  'update dsd_dispensor_site_detail set dsd_Cal_Small = ' + str + ' where dsd_Dispensor_ID = "' + jsondata.ID + '"';
    }
    else if (calnumber == 2)
    {
      var query =  'update dsd_dispensor_site_detail set dsd_Cal_Medium = ' + str + ' where dsd_Dispensor_ID = "' + jsondata.ID + '"';
    }
    else if (calnumber == 3)
    {
      var query =  'update dsd_dispensor_site_detail set dsd_Cal_Large = ' + str + ' where dsd_Dispensor_ID = "' + jsondata.ID + '"';
    }
     connection.query(query,function(err,rows){
        connection.release();
        if (err) throw err;
        if (!rows)
        {
          logger.log('info','updated');
        }
        else
        {
          logger.log('info','thats weird' ,rows); 
        }
        return;
    });

    connection.on('error', function(err) {
          logger.log('info','This should not happen',{'error' :err});
          return;
    });
  });
return;
}

function DoSomethingWithVersion(jsondata)
{
  var str = '';

    str = jsondata.VR;
  
  logger.log('info','Version ' + str);

pool.getConnection(function(err,connection){
        if (err) {
          connection.release();
          return;
        }     
   
      var query =  'update dsd_dispensor_site_detail set dsd_Version = "' + str + '" where dsd_Dispensor_ID = "' + jsondata.ID + '"';
   
     connection.query(query,function(err,rows){
        connection.release();
        if (err) throw err;
        if (!rows)
        {
          logger.log('info','updated');
        }
        else
        {
          logger.log('info','thats weird' ,rows); 
        }
        return;
    });

    connection.on('error', function(err) {
          logger.log('info','This should not happen',{'error' :err});
          return;
    });
  });
return;
}


function DoSomethingWithSignal(jsondata)
{
  var str = '';

    str = jsondata.CSQ;
  
    logger.log('info','Signal ' + str);

      pool.getConnection(function(err,connection){
        if (err) {
          connection.release();
          return;
        }     
   
      var query =  'update dsd_dispensor_site_detail set dsd_Signal = "' + str + '" where dsd_Dispensor_ID = "' + jsondata.ID + '"';
   
     connection.query(query,function(err,rows){
        connection.release();
        if (err) throw err;
        if (!rows)
        {
          logger.log('info','updated');
        }
        else
        {
          logger.log('info','thats weird' ,rows); 
        }
        return;
    });

    connection.on('error', function(err) {
          logger.log('info','This should not happen',{'error' :err});
          return;
    });
  });
return;
}

function DoRemoveHeaders(res,status)
{

  res.removeHeader('Connection');
  res.removeHeader('Date');
  res.removeHeader('Transfer-Encoding');
  res.removeHeader('X-Powered-By');
  res.writeHead(status);
  return;
}

function getTimea(){
  return Math.floor(Date.now() / 1000);
}

function createNewDefaultRouter(connection ,ID)
{
logger.log('info','HEITO');
  var query = 'insert into dsd_dispensor_site_detail (dsd_Dispensor_ID, dsd_Location, dsd_Date_Created, dsd_GPS_LAT,dsd_GPS_LONG)'
              + ' values ("' + ID + '",concat("NEW UNIT ",unix_timestamp()), unix_timestamp(),"-26.139263","28.02056");';
logger.log('info','HEITO:' + query);
        connection.query(query,function(err,rows){
          if (err) throw err;
          if (!rows)
          {
            logger.log('info','problems creating new device');
          }
          else
          {
            logger.log('info','rows.insertId ' + rows.insertId);
          }
        }
        );

}


function checkbacklog(req, res,ID)
{
  pool.getConnection(function(err,connection){
        if (err) {
          connection.release();
          return;
        }

        console.log('connected as id ' + connection.threadId + ' | ' + getTimea() );
        logger.log('info','Current ID :' + ID);
        
        var query =
                  'select * from dcb_device_command_backlog where  dcb_Sent = 0 and dsd_Entry_Id = (select dsd_Entry_Id from dsd_dispensor_site_detail where dsd_Dispensor_ID = "' + ID + '")';

        logger.log('info','query :' + query);
        connection.query(query,function(err,rows){

            //connection.release();
            if (err) throw err;
            if (!rows)
            {
              DoRemoveHeaders(res,200);
              res.end();
              logger.log('info', '<<<<OUTGOING:POST<<<<', {time : getTimea()});
            }
            else
            {
              if(rows.length == 0)
              {
                logger.log('info', 'No backlog');
                DoRemoveHeaders(res,200);
                res.end();
                logger.log('info', '<<<<OUTGOING:POST<<<<', {time : getTimea()});
                return;
              }
              logger.log('info', 'rows',{'rows': rows[0]});
              var update =
                  'update dcb_device_command_backlog set dcb_Sent = 1, dcb_Date_Updated = unix_timestamp() where dcb_Entry_Id = ' + rows[0].dcb_Entry_Id;
                connection.query(update,function(err,updaterows){
                  connection.release();
                  if (err) throw err;
                  if (!rows)
                  {
                     
                  }
                  else
                  {

                  }
                });

              console.log(rows[0].dcb_command_packet);
              var command_packet = rows[0].dcb_command_packet;
              var sent = false;
              DoRemoveHeaders(res,200);
              res.write(command_packet);
              res.end();
              logger.log('info', '<<<<OUTGOING:POST<<<<', {time : getTimea()});
      

            }
            return;
        });

        connection.on('error', function(err) {
              console.log('Error in connection database');
              return;
        });
  });



}

function handle_database(jsondata) {

    pool.getConnection(function(err,connection){
        if (err) {
          connection.release();
          return;
        }
        



        console.log('connected as id ' + connection.threadId + ' | ' + getTimea() );
        logger.log('info','Current ID :' + jsondata.ID);
        var query = 'select count(dsd_Entry_Id) as counter from dsd_dispensor_site_detail where dsd_Dispensor_ID = "' + jsondata.ID + '"';
        logger.log('info','query :' + query);

        connection.query(query,function(err,rows){
          logger.log('info','counter ' + rows[0].counter);
          //if (err) throw err;
          if (!rows)
          {
            logger.log('info','problems on rows');
          }
          else
          {
            logger.log('info','counter ' + rows[0].counter);
            if(rows[0].counter <= 0 )
            {
              createNewDefaultRouter(connection,jsondata.ID);
return;
            }


          }
        }
        );

        console.log('connected as id ' + connection.threadId + ' | ' + getTimea() );

        var query =
                  'insert into ddd_dispensor_dispensing_detail(dsd_Entry_Id,ddd_Date_Start,ddd_Duration,ddd_Totaliser,ddd_Reading,ddd_FillType,ddd_Tamper,ddd_Date_Created)'+
                  ' values ((select dsd_Entry_Id from dsd_dispensor_site_detail where dsd_Dispensor_ID = "' + jsondata.ID + '") ,'+
                  ' from_unixtime(' + jsondata.DT+'),"' + jsondata.PD+'","' +
                  (jsondata.TR) +'","' +
                  jsondata.PR+'","' +
                  jsondata.PT+'","' +
                  jsondata.TA+'",unix_timestamp())';


        connection.query(query,function(err,rows){
//            connection.release();
            if (err) throw err;

            console.log(rows.insertId);
            return;
        });
if (jsondata.TA != 0)
        { 
          var query =
                    'update dsd_dispensor_site_detail set dsd_Tamper = "' + jsondata.TA + '" where dsd_Dispensor_ID = "' + jsondata.ID + '"';


          connection.query(query,function(err,rows){
              connection.release();
              if (err) throw err;

              console.log('tamper logged');
              return;
          });
        }
        connection.on('error', function(err) {
               console.log('Error in connection database');
              return;
        });
  });
}


app.use(function(req, res, next){
  if (req.is('text/*')) {
    req.text = '';
    req.setEncoding('utf8');
    req.on('data', function(chunk){ req.text += chunk });
    req.on('end', next);
  } else {
    next();
  }
});
/*
app.use(bodyParser.urlencoded({
  extended: true
}));
*/
/*
app.use(bodyParser.json());
*/

function insertstr(str, index, value) {
    return str.substr(0, index) + value + str.substr(index);
}

/**********
Process Unit Data here
**********/
app.post('/post', function (req, res) {
logger.log('info', '>>>>INCOMING:POST>>>>', {time : getTimea(), body : req.text});
//logger.log('info', 'Some Data Came in ', {time : getTimea(), body : req.text});
 var str = req.text;
 

 var checksomething = str.split("}{").length - 1;
 console.log("json packet count : " + checksomething);
 if(checksomething >= 1)
  {


    /***** 
     MULTIPLE PACKET IMPLEMENTATION

     *****/

    str = str.replace("}{", "}|{");
    var bassArr = str.split("|");
    var currentID = '';
    for(var i = 0; i <= bassArr.length -1 ; i++)
    {
      logger.log('info', '=========== ' , bassArr[i]);
      var jsondata = JSON.parse(bassArr[i]);

      logger.log('info', 'Dis net sad ' , jsondata.PCK);

      if(jsondata.PCK == null)
      {
        logger.log('info', 'Nothing Valid to Process ', {time : getTimea()});
        DoRemoveHeaders(res,200);
        res.end();
        logger.log('info', '<<<<OUTGOING:POST<<<<', {time : getTimea()});
        return;

      }
      else
      {

        currentID = jsondata.ID;
        logger.log('info', 'starttime ',{time : getTimea()} );
        handle_database(jsondata);
        
      }
    }

    logger.log('info', 'Before Check BackLog', {time : getTimea()});

    checkbacklog(req, res,currentID);

    return;

     /***** 

      END

     *****/


    
  }
  
  
 var jsondata = JSON.parse(req.text);

logger.log('info', 'Dis net sad ' , jsondata.PCK);

if(jsondata.PCK == null)
  {
	if (jsondata.CSQ != null)
    {
      DoSomethingWithSignal(jsondata);
      DoRemoveHeaders(res,200);
      res.end();
      logger.log('info', '<<<<OUTGOING:POST<<<<', {time : getTimea()});
      return;
    }
    else if (jsondata.VR != null)
    {
      DoSomethingWithVersion(jsondata);
      DoRemoveHeaders(res,200);
      res.end();
      logger.log('info', '<<<<OUTGOING:POST<<<<', {time : getTimea()});
      return;
    }
    else if ((jsondata.CAL1 != null) || (jsondata.CAL2 != null) || (jsondata.CAL3 != null))
    {
      DoSomethingWithCalibration(jsondata);
      DoRemoveHeaders(res,200);
      res.end();
      logger.log('info', '<<<<OUTGOING:POST<<<<', {time : getTimea()});
      return;
    }
    else if(!jsondata.LC)
    {
      logger.log('info', 'Responded ', {time : getTimea()});
      DoRemoveHeaders(res,200);
      res.end();
      logger.log('info', '<<<<OUTGOING:POST<<<<', {time : getTimea()});
      return;
    }
    
    else
    {
      DoSomethingWithLocation(jsondata);
      DoRemoveHeaders(res,200);
      res.end();
      logger.log('info', '<<<<OUTGOING:POST<<<<', {time : getTimea()});
      return;
    }
  }
else
  {
    var currentID = jsondata.ID;
    logger.log('info', 'starttime ',{time : getTimea()} );
    handle_database(jsondata);




    logger.log('info', 'Some Data Came in ', {time : getTimea(), body : jsondata});

    checkbacklog(req, res,currentID);

  }
});


app.get("/get/time",function(req,res){
  
  logger.log('info', '>>>>INCOMING:GET>>>>', {time : getTimea()});
  var json = {};

  if(req.query["fmt"]=="unix")
  {
      json["DT"] = Math.floor(Date.now() / 1000);
  }
  else
  {
      json["DT"] = new Date();
  }

  console.log('get time ' + JSON.stringify(json));
  DoRemoveHeaders(res,200);
  
  res.write(JSON.stringify(json));
  res.end();
  logger.log('info', '<<<<OUTGOING:GET<<<<', {time : getTimea()});
});


app.get("/",function(req,res){
connection.query('SELECT count(*) as counter from ddd_dispensor_dispensing_detail ', function(err, rows, fields) {
connection.end();
  if (!err)
    console.log('The solution is: ', rows);
  else
    console.log('Error while performing Query.');
  });
res.send('thanks for popping in');
res.end();
});

app.listen(3000);


